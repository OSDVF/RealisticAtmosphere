//?#version 440
#include "Intersections.glsl"
#include "SceneObjects.glsl"
#include "Common.glsl"

layout(local_size_x=16, local_size_y=16, local_size_z = 1) in;
layout(rgba8, binding=0) writeonly uniform image2D directIrradianceOutput;
layout(std430, binding=1) readonly buffer PlanetBuffer
{
    Planet planets[];
};

vec2 texSize = vec2(gl_WorkGroupSize * gl_NumWorkGroups);
vec2 uv = vec2(gl_GlobalInvocationID.xy) / texSize;

vec3 get_transmittance_to_top_atmospheric_boundary(
    const Planet planet, float r, float mu) {

    float bottomRadius2 = planet.surfaceRadius * planet.surfaceRadius;
    float topRadius2 = planet.atmosphereRadius * planet.atmosphereRadius;

    float H = sqrt(topRadius2 - bottomRadius2);
    float rho = sqrt(max(r * r - bottomRadius2, 0.0));
    float d = max(-r * mu + sqrt(max(r * r * (mu * mu - 1.0) + topRadius2, 0.0)), 0.0);
    float d_min = planet.atmosphereRadius - r;
    float d_max = rho + H;
    float x_mu = (d - d_min) / (d_max - d_min);
    float x_r = rho / H;

    vec2 uv = vec2(
        GetTextureCoordFromUnitRange(x_mu, texSize.x),
        GetTextureCoordFromUnitRange(x_r, texSize.y)
    );

    return texture(transmittanceTable, uv).xyz;
}

void main()
{
	float r = planets[0].surfaceRadius +
        GetUnitRangeFromTextureCoord(uv.y, texSize.y) *
        (planets[0].atmosphereRadius - planets[0].surfaceRadius);
    float mu_s = clamp(2.0 * GetUnitRangeFromTextureCoord(uv.x, texSize.x) - 1.0, -1.0, 1.0);
    float a_s = planets[0].sunAngularRadius;
    float average_cosine_factor;
    if (mu_s < -a_s) {
        average_cosine_factor = 0.0;
    } else if (mu_s > a_s) {
        average_cosine_factor = mu_s;
    } else {
        average_cosine_factor = (mu_s + a_s) * (mu_s + a_s) / (4.0 * a_s);
    }

    vec3 delta_irradiance =
        planets[0].solarIrradiance * 
        get_transmittance_to_top_atmospheric_boundary(planets[0], r, mu_s) *
        average_cosine_factor;

	imageStore(directIrradianceOutput, ivec2(gl_GlobalInvocationID.xy), vec4(delta_irradiance,0));
}