//?#version 440
#include "Intersections.glsl"
#include "SceneObjects.glsl"

layout(local_size_x=16, local_size_y=16, local_size_z = 1) in;
layout(rgba32f, binding=0) writeonly uniform image2D transmittanceOutput;
layout(std430, binding=1) readonly buffer PlanetBuffer
{
    Planet planets[];
};

void main()
{
	vec4 color;
	vec2 tc = vec2(gl_GlobalInvocationID.xy) / float(gl_WorkGroupSize * gl_NumWorkGroups);
	
	float x_mu = tc.x;
    float x_r = tc.y;
    float bottomRadius2 = planets[0].surfaceRadius * planets[0].surfaceRadius;
    float topRadius2 = planets[0].atmosphereRadius * planets[0].atmosphereRadius;
    float H = sqrt(topRadius2 - bottomRadius2);
    float rho = H * x_r;
    float r = sqrt(rho * rho + bottomRadius2);
    float d_min = planets[0].atmosphereRadius - r;
    float d_max = rho + H;
    float d = d_min + x_mu * (d_max - d_min);
    float mu = d == 0.0 ?
          1.0 :
          (H * H - rho * rho - d * d) / (2.0 * r * d);
    mu = clamp(mu, -1.0, 1.0);

    const int SAMPLE_COUNT = 500;
    float dx = max(-r * mu + sqrt(max(r * r * (mu * mu - 1.0) + topRadius2, 0.0)), 0.0) / SAMPLE_COUNT;
    float optical_length_rayleigh = 0.0;
        for (int i = 0; i <= SAMPLE_COUNT; i++) {
        float d_i = i * dx;
        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
        float rayleighHF = exp(-(r_i - planets[0].surfaceRadius)/planets[0].rayleighScaleHeight);
        float weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5 : 1.0;
        optical_length_rayleigh += rayleighHF * weight_i * dx;
    }
    float optical_length_mie = 0.0;
        for (int i = 0; i <= SAMPLE_COUNT; i++) {
        float d_i = i * dx;
        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
        float rayleighHF = exp(-(r_i - planets[0].surfaceRadius)/planets[0].mieScaleHeight);
        float weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5 : 1.0;
        optical_length_mie += rayleighHF * weight_i * dx;
    }
    /*float optical_length_absorption = 0.0;
        for (int i = 0; i <= SAMPLE_COUNT; i++) {
        float d_i = i * dx;
        float r_i = sqrt(d_i * d_i + 2.0 * r * mu * d_i + r * r);
        float y_i = get_density(globals.parameters.absorption_density, r_i - globals.parameters.bottom_radius);
        float weight_i = i == 0 || i == SAMPLE_COUNT ? 0.5 : 1.0;
        optical_length_absorption += y_i * weight_i * dx;
    }*/

    vec3 transmittance = exp(-(
        planets[0].rayleighCoefficients * optical_length_rayleigh +
        planets[0].mieCoefficient * 1.11 * optical_length_mie));
        // +planets[0].absorption_extinction * optical_length_absorption)); Ozone not yet

	imageStore(transmittanceOutput, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance,0));
}