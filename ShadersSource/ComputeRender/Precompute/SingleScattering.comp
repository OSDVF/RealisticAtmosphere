/**
 * @author Ondøej Sabela
 * @brief Realistic Atmosphere - Thesis implementation.
 * @date 2021-2022
 * Copyright 2022 Ondøej Sabela. All rights reserved.
 * Uses ray tracing, path tracing and ray marching to create visually plausible outdoor scenes with atmosphere, terrain, clouds and analytical objects.
 * Large portions of source code reused from reference implementation of the Precomputed Atmospheric Scattering paper by Eric Bruneton and Fabrice Neyret.
 * Code available at https://github.com/ebruneton/precomputed_atmospheric_scattering.
 */

 /**
 * Original License:
 * Copyright (c) 2017 Eric Bruneton
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Precomputed Atmospheric Scattering
 * Copyright (c) 2008 INRIA
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

//?#version 440
#include "../../Common.glsl"
#include "../../Buffers.glsl"
#include "../../SceneObjects.glsl"
#include "../../Math.glsl"
#include "PrecomputeSettings.glsl"

layout(local_size_x=16, local_size_y=16, local_size_z = 4) in;
layout(rgba32f, binding=0) writeonly uniform image3D scatteringOutput;

Planet planet = planets[PrecomputeSettings_planetIndex];
DirectionalLight light;

void ComputeSingleScatteringIntegrand(
    const Planet planet,
    sampler2D transmittance_texture,
    float r, float mu, float mu_s, float nu, float d,
    bool ray_r_mu_intersects_ground,
    out vec3 rayleigh, out vec3 mie) {
  float r_d = ClampRadius(planet, sqrt(d * d + 2.0 * r * mu * d + r * r));
  float mu_s_d = ClampCosine((r * mu_s + d * nu) / r_d);
  vec3 transmittance =
      GetTransmittance(
          planet, transmittance_texture, r, mu, d,
          ray_r_mu_intersects_ground) *
      GetTransmittanceToLight(
          planet, light.angularRadius, transmittance_texture, r_d, mu_s_d);
    float rayleighDensity = exp(-(r_d - planet.surfaceRadius)/planet.rayleighScaleHeight);
    float mieDensity = exp(-(r_d - planet.surfaceRadius)/planet.mieScaleHeight);
  rayleigh = transmittance * rayleighDensity;
  mie = transmittance * mieDensity;
}

void ComputeSingleScattering(
	const Planet planet,
    sampler2D transmittance_texture,
    float r, float mu, float mu_s, float nu,
    bool ray_r_mu_intersects_ground,
    out vec3 rayleigh, out vec3 mie) {

  // float of intervals for the numerical integration.
  const int SAMPLE_COUNT = 50;
  // The integration step, i.e. the length of each integration interval.
  float dx =
      DistanceToNearestAtmosphereBoundary(planet, r, mu,
          ray_r_mu_intersects_ground) / float(SAMPLE_COUNT);
  // Integration loop.
  vec3 rayleigh_sum = vec3(0.0);
  vec3 mie_sum = vec3(0.0);
  for (int i = 0; i <= SAMPLE_COUNT; ++i) {
    float d_i = float(i) * dx;
    // The Rayleigh and Mie single scattering at the current sample point.
    vec3 rayleigh_i;
    vec3 mie_i;
    ComputeSingleScatteringIntegrand(planet, transmittance_texture,
        r, mu, mu_s, nu, d_i, ray_r_mu_intersects_ground, rayleigh_i, mie_i);
    // Sample weight (from the trapezoidal rule).
    float weight_i = (i == 0 || i == SAMPLE_COUNT) ? 0.5 : 1.0;
    rayleigh_sum += rayleigh_i * weight_i;
    mie_sum += mie_i * weight_i;
  }
  rayleigh = rayleigh_sum * dx * light.irradiance *
      planet.rayleighCoefficients;
  mie = mie_sum * dx * light.irradiance * planet.mieCoefficient;
}

void GetRMuMuSNuFromScatteringTextureFragCoord(
    Planet planet, vec3 frag_coord,
    out float r, out float mu, out float mu_l, out float nu, out float lightIndex,
    out bool ray_r_mu_intersects_ground) {
  const vec4 SCATTERING_TEXTURE_SIZE = vec4(
      SCATTERING_TEXTURE_NU_SIZE - 1,
      SCATTERING_TEXTURE_MU_S_SIZE,
      SCATTERING_TEXTURE_MU_SIZE,
      SCATTERING_TEXTURE_R_SIZE);
  lightIndex = floor(frag_coord.y/float(SCATTERING_TEXTURE_MU_SIZE));
  frag_coord.y -= lightIndex * SCATTERING_TEXTURE_MU_SIZE;

  float frag_coord_nu =
      floor(frag_coord.x / float(SCATTERING_TEXTURE_MU_S_SIZE));
  float frag_coord_mu_l =
      mod(frag_coord.x, float(SCATTERING_TEXTURE_MU_S_SIZE));
  vec4 uvwz =
      vec4(frag_coord_nu, frag_coord_mu_l, frag_coord.y, frag_coord.z) /
          SCATTERING_TEXTURE_SIZE;
  GetRMuMuSNuFromScatteringTextureUvwz(
      planet, uvwz, r, mu, mu_l, nu, ray_r_mu_intersects_ground);
  // Clamp nu to its valid range of values, given mu and mu_l.
  nu = clamp(nu, mu * mu_l - sqrt((1.0 - mu * mu) * (1.0 - mu_l * mu_l)),
      mu * mu_l + sqrt((1.0 - mu * mu) * (1.0 - mu_l * mu_l)));
}

void ComputeSingleScatteringTexture(const Planet planet,
    sampler2D transmittance_texture, vec3 frag_coord,
    out vec3 rayleigh, out vec3 mie) {
  float r;
  float mu;
  float mu_s;
  float nu;
  float lightIndex;
  bool ray_r_mu_intersects_ground;
  GetRMuMuSNuFromScatteringTextureFragCoord(planet, frag_coord,
      r, mu, mu_s, nu, lightIndex, ray_r_mu_intersects_ground);
    light = directionalLights[planet.firstLight + uint(lightIndex)];
  ComputeSingleScattering(planet, transmittance_texture,
      r, mu, mu_s, nu, ray_r_mu_intersects_ground, rayleigh, mie);
}

void main()
{
    vec3 texSize = vec3(gl_WorkGroupSize * gl_NumWorkGroups);
	vec3 frag_coord = vec3(gl_GlobalInvocationID.xyz + vec3(0.5));

	vec3 r,m;
    ComputeSingleScatteringTexture(planet, transmittanceTable, frag_coord, r, m);

	imageStore(scatteringOutput, ivec3(gl_GlobalInvocationID.xyz), vec4(r, m.r));
}